--Template 폴더를 그대로 복사해서 새로운 폴더를 만들고 quote-generator라는 이름을 준다. 
배경 디자인을 가져오기 위해서 heroPattern.com을 치면 웹사이트가 나오는데, 거기서 Circuit Board라는 디자인을 선택한 후 Foreground color를 black, Background color를 white로 주고 Foreground Opacity를 0.08에 맞춘후,코드를 복사한다. 
style.css에서 body안에 그대로 붙여 넣는다. 
폰트를 선택하기 위해서 google font에 들어가서 Mont 를 검색하면 Montserrat가 맨처음 뜨는데, 그것을 선택해서 원하는 굵기를 Select this style한다음 라디오 버튼에서 import를 선택한후 코드란 안에 있는 <style></style>안에 있는 내용을 복사하여 style.css 맨 위에 붙이고 
color,font-family,font-weight,text-align,display,align-itemes,justify-content를 설정한다. 
index.html로 와서 body안에 div.quote-container#quote-container를 치고 엔터를 누르면 div tag이 만들어 진다. class 와 id가 붙은 디브이다. 
그 안에 ctrl+/를 눌러서 comment 표시를 만들고 Quote라고 쓰고 그 밑에 .quote-text를 써서 div를 만들고 그 안에 i.fas.fa-quote-left를 치고 엔터를 누르면 font awesome icon의 한 부분을 쓸 수 있게 된다. 
더 자세히 알고 싶으면 font awesome 웹사이트를 참조하라. fas는 font awesome solid를 말한다.
 i tag과 같은 위치에 span.quote를 치고 엔터를 누르면 span tag이 만들어지고 거기에 원하는 격언을 쓴다. 
 visual studio code에서 긴 문장을 한 눈에 보이도록 줄을 내려보이게 하는 방법은 alt+z이다. 
 quote-text div와 같은 위치에 author를 표기하기 위한 div를 만든다. 
 .quote-author를 치고 엔터. 그 안에 span#author를 쳐서 span tag을 만들고 author의 이름을 적는다. 
 .quote-author div와 같은 위치에 .button-container를 쳐서 div를 만들고 그 안에 .button.twitter-button#twitter를 쳐서 button tag을 만들고 그 안에 title="Tweet This!"라는 옵션을 넣는데, 이것은 트위터 버튼을 hover over하면 pop up 되는 문구이다.
 button tag안에 i.fab.fa-twitter를 쳐서 icon tag을 만든다. 이때 fab는 fant awesome brand를 의미하며 소셜미디어의 다양한 로고를 사용할 수 있다. 
 또다른 버튼을 만드는데, 이것은 새로운 격언으로 가기 위한 버튼이다. 
 위의 button tag와 같은 위치에서 button.new-quote를 쳐서 버튼 택을 만들고 New Quote라고 쓴다. 
 여기까지 하고 live server를 이용하여 보면, body에 min-height:100vh를 줌으로 화면전체를 차지하게 하고, display:flex를 줌으로 글자가 화면 가운데로 모이게 하고 배경 디자인을 준것을 볼 수 있다. 
 이제 style.css로 와서 글자 부분에 style을 수정하도록 한다. 
 먼저, .quote-container에서 width : auto, max-width:900px;을 줌으로써 글자가 화면 가운데 있을 뿐 아니라 넓이가 900px을 넘으면 다음 줄로 넘어가도록 제한을 둔다. 
 그리고 padding:20px 30px;을 줌으로써 위,아래는 20, 오른쪽, 왼쪽은 30을 준다. 
 border-radius:10px; background-color:rgba(255,255,255,0.4) 여기서 이 디브의 바탕은 하얀색인데 투명도를 좀 주어서 백 그라운드의 디자인을 조금 엿볼 수 있게 하였다. 
 box-shadow:0 10px 10px 10px rgba(0,0,0, 0.2); 순서대로 horizontal offset, vertical offset, blur, radius, 그리고 rgba를 검은새과 투명도 0.2를 주었다.
 이제 .quote-text{}안에서 style을 정의한다. 
 먼저 font-size:2.75rem;을 넣었는데 여기서 px대신에 rem을 사용하였다. 간략하게 말하자면, 이것은 responsive design을 돕는다. 길게 말하자면, rem은 relative size compare to root element이다. 여기서 root element는 html element를 의미한다.
 대부분의 브라우져에서 default value는 16px이다. 이것이 문제가 되는것은 모바일 기기에서 유저가 폰트사이즈를 키우면 16px값이 더 커질 수 있기 때문이다. 기본적으로 rem은 consistent and responsive design을 유지하도록 돕는다. 
 그래서 1rem은 16px을 2.75rem은 44px에 대응된다.   
 .long-quote { font-size:2rem;} 자바스크립트를 사용하여 현재는 없는 class name을 줌으로써 font size를 조절한다. 
 .fa-quote-left{ font-size:4rem;} "의 크기를 좀 크게 하여 임팩트를 준다. 
 이제 quote-author부분을 다듬어 보자. 
 .quote-author{ margin-top:15px; font-size:2rem; font-weight:400; font-style:italic;}
 이제 반응형으로 해 보았을때, (f12눌러서) 넓이를 줄여갈수록 quote-container box의 오른쪽 왼쪽 경계선이 안보이는 것을 알수있다. 그래서 박스의 오른쪽 왼쪽에 좀더 여백을 주고 싶기때문에, style.css 가장 밑 부분에 미디어 쿼리를 놓는다.(override할 수 있도록)
 @media screen and (max-width: 1000px) {
     .quote-container {
         margin : auto 10px;
     }
     .quote-text {
         font-size : 2.5rem;
     }
 }
 이제 버튼을 다음어 보자. 
 .button-container{ margin-top:15px; display:flex; justify-content : space-between;}
 button { cursor : pointer; font-size:1.2rem; height:2.5rem; border:none; border-radius:10px; color:#fff; background:#333; outline:none; padding:0.5rem 1.8rem; box-shadow:0 0.3rem rgba(121,121,121,0.65);}
 버튼을 hover over했을때 색깔이 바뀌거나 크기가 바뀌도록 해보자.
 button:hover {
     filter : brightness(110%)
 } 더 좋은 방법이 있으나, 이것은 쉽고 빠른 방법임에는 틀림없다. 이제 버튼을 클릭했을때 버튼이 약간 움직이는 것처럼 보이도록 해보자.
 button:active {
     transform : translate(0, 0.3rem);
     box-shadow : 0 0.1rem rgba(255, 255, 255, 0.65);
 } 위에서 버튼에 shadow를 주었고 그 shadow만큼 밑으로 내려가는 것처럼 보이게 했다. active는 클릭했을때의 상태이다. 
 이번에는 트위터 버튼을 눌렀을때 종달새가 색깔이 바뀌고 좀더 커보이도록 해보자.
 .twitter-button : hover {
    color : #38a1f3; 
 }
 .fa-twitter {
     font-size : 1.5rem;
 }
 여기까지 style에 대한 것을 완성하였다. 
 이제 java script의 영역으로 넘어가 보자. 
 격언을 배달하는 api중 하나는 type.fit/api/quotes이다. 제이슨 포맷으로 데이터가 넘어온다. array안에 객체들이 나열되어 있고 각각의 객체는 text와 author에 대한 value값을 가지고 있다. 
 script.js에서 맨 처음 하는 것은 //Get Quotes From API이다. 이것을 하기 위해서 asynchronous fetch request를 try and catch block안에서 해야한다.
 asynchronous function은 어떤 때이든 독립적으로 행할 수 있고 페이지를 로딩하기위해서 브라우져가 멈출 필요가 없다.
 함수를 정의하는 방법은 async라는 키워드를 써서 함수를 정의 하는 것이고 그 안에 api url을 적는다. 그리고 try and catch block안에서 정의한다. try안에서 fetch request를 한다.
 let apiQuotes = []; 
 async function getQuotes(){
     const apiUrl = 'https://type.fit/api/quotes';
     try{
         const response = await fetch(apiUrl); //apiUrl로부터 데이터를 fetch하기 전까지는 response라는 변수가 populated되지 않는다. response변수는 data를 받는다. 
         apiQuotes = await response.json();// api로부터 json데이터를 받아서 response라는 변수에 문자열로(series of strings) 저장하고, response를 json object로 변환하여(response.json()) 글로벌변수인 apiQuotes에 담는다. 
         console.log(apiQuotes);
     }catch(error){
         //Catch Error Here
     }
 }  

 저장하고 f12를 통해서 콘솔창을 열어보면 1643개의 객체가 배열(array)에 담겨서 도착한 것을 알 수 있다. 
 그런데 우리는 1643개의 격언중에서 한번 New Quote 버튼을 클릭할때마다 서로 다른 격언을 내보내야 한다. 그래서 또 하나의 함수를 만들어야 하는데,
 1643개의 격언은 한번에 받고 그 다음에 그중에 하나를 랜덤으로 골라내는 함수를 정의해야 한다. 그래서 그것에 관한 함수를 정의하고 getQuotes()안에서 불러와야 한다. 
 자바 스크립트에서 Math.random()은 0과 같거나 크고 1보다 작은 임의의 수를 리턴하고 Math.floor()는 내림을 해준다. 
코드를 다시 조정해 보면,

let apiQuotes = [];

//Show New Quote
function newQuote(){
    // Pick a random quote from apiQuotes array
    const quote = apiQuote[Math.floor(Math.random()*apiQuotes.length)];
    console.log(quote);
}

async function getQuotes(){
    const apiUrl = 'https://type.fit/api/quotes';
    try{
        const response = await fetch(apiUrl);
        apiQuotes = await response.json();
        console.log(apiQuotes);
        newQuote();
    }catch(error){
        //Catch Error Here
    }
}

또 다른 방법은 quotes.js를 만들어서 html에 <script src="quotes.js"></script>를 붙이는 것이다. 
quotes.js안에서 const localQuotes라는 변수에 1643개의 객체 배열을 복사해서 붙여놓고, script.js에서 newQuote()안에 apiQuote를 localQuote로 바꾼다. 그리고 getQuote()는 지운다.

이제 자바스크립트를 이용하여 페이지를 동적으로 만들어보도록 한다. 
html에 여러개의 id가 정의되어 있다. 이 id를 가지고 element를 불러내어 변수에 담는다.

const quoteContainer = document.getElementById("quote-container");
const quoteText = document.getElementById("quote");
const authorText = document.getElementById("author");
const twitterBtn = document.getElementById("twitter");
const newQuoteBtn = document.getElementById("new-quote");

그리고 html에 예시로 넣어놨던 quote의 내용과 author의 내용을 없앤다. 왜냐하면 동적으로 들어갈 것이기 때문이다. 

그리고 newQuote()안에
quoteText.textContent = quote.text;
authorText.textContent = quote.author; 를 붙인다. 

그런데 가끔가다가 author가 null인 경우가 있다. 그러므로 코드를 보완해야 한다. 
// Check if Author field is blank and replace it with 'unknown'
if(!quote.author){
    authorText.textContent = 'Unknown';
} else {
    authorText.textContent = quote.author;
}

또 한가지는 quote의 길이가 길면 스타일을 조금 바꾸어야한다. style.css에서 .long-quote를 정의한대로 말이다. 
//Check Quote length to determine styling
if(quote.text.length > 50) {
    quoteText.classList.add('long-quote');
}else{
    quoteText.classList.remove('long-quote');
}

이제 두개의 버튼을 동적으로 사용할 차례이다. 트위터 버튼을 누르면 트위터에 그 격언이 계시되도록 한다. 
https://twitter.com/intent/tweet 을 통해서  선택된 격언을 트윗으로 날릴 수 있다. 쿼리 파라메터가 두개가 있는데, 하나는 text이고 하나는 url이다.
text 는 quote와 author이며 스페이스와 대쉬,스페이스로 구분된다. script.js에서 함수를 써보면

//Tweet Quote
function tweetQuote(){
    const twitterUrl = `https://twitter.com/intent/tweet?text=${quoteTextContent} - ${authorText.textContent}`;
    window.open(twitterUrl,'_blank')
}
위에서 ``는 template string이라고 불리운다. template string은 변수를 받아서 문자로 바꾸어 주는 역할을 한다. 그 안에 twitter url을 적고 ?text=${quoteText.textContent} - ${authorText.textContent}를 적는다.
그리고 window.open()을 이용하여 윈도우를 여는데, 파라메터로 twitterUrl과 '_blank'를 넣는다. '_blank'는 새로운 탭에서 twitter를 열게 해 주는 역할을 하는 것이다.

이제 트위터 버튼과 new quote버튼을 동적으로 만들기 위해서 event listener를 등록해야 한다. 
일반적으로는 맨 밑에 적는다. 왜냐하면 함수를 부르기 전에 정의해야 하니까 말이다. 

// Event listener
newQuoteBtn.addEventListener('click',newQuote); //target은 click event, newQuote는 등록할 함수
twitterBtn.addEventListener('click',tweetQuote);

** 부록 - CSS Loader 사용하기 **
https://www.w3schools.com/howto/howto_css_loader.asp
에서 div와 css 코드를 복사한다. 
html에서 script tag위에 .loader#loader을 넣고 엔터한다. <div class="loader" id="loader"></div>
style.css에서 media query위에 css 코드를 붙여넣는다. 
script.js에서 
const loader = document.getElementById('loader');

function loading(){
    loader.hidden=false;
    quoteContainer.hidden=true;
}

// Hide loading
function complete(){    
    loader.hidden = true;
    quoteContainer.hidden = false;
}

loading이 시간이 걸릴때 나타내는 표시이다. localQuote일때는 로딩이 빠르지만, apiQuote일 경우에는 좀더 시간이 걸리기 때문이다. 
getQuotes()함수의 맨 처음에 loading()을, 그리고 newQuote()함수 맨 처음에 loading()을, 그리고 newQuote()함수 맨 마지막에 complete()을 두면, 로딩이 걸리는 시간만큼 css loader가 화면에 나타난다. 